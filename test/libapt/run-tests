#!/bin/sh
set -e

DIR=$(readlink -f $(dirname $0))
if [ -z "$MAKELEVEL" ]; then
	echo 'Compiling the tests …'
	(cd $DIR && make)
	echo 'Running all testcases …'
fi
LDPATH="$DIR/../../build/bin"
EXT="_libapt_test"
EXIT_CODE=0

# detect if output is on a terminal (colorful) or better not
if expr match "$(readlink -f /proc/$$/fd/1)" '/dev/pts/[0-9]\+' > /dev/null; then
	COLHIGH='\033[1;35m'
	COLRESET='\033[0m'
	TESTOKAY='\033[1;32mOKAY\033[0m'
	TESTFAIL='\033[1;31mFAILED\033[0m'
else
	COLHIGH=''
	COLRESET=''
	TESTOKAY='OK'
	TESTFAIL='###FAILED###'
fi

for testapp in $(ls ${LDPATH}/*$EXT)
do
	name=$(basename ${testapp})
	NAME="${COLHIGH}${name}${COLRESET}"
	tmppath=""

	if [ $name = "GetListOfFilesInDir${EXT}" ]; then
		# TODO: very-low: move env creation to the actual test-app
		tmppath=$(mktemp -d)
		touch "${tmppath}/anormalfile" \
			"${tmppath}/01yet-anothernormalfile" \
			"${tmppath}/anormalapt.conf" \
			"${tmppath}/01yet-anotherapt.conf" \
			"${tmppath}/anormalapt.list" \
			"${tmppath}/01yet-anotherapt.list" \
			"${tmppath}/wrongextension.wron" \
			"${tmppath}/wrong-extension.wron" \
			"${tmppath}/strangefile." \
			"${tmppath}/s.t.r.a.n.g.e.f.i.l.e" \
			"${tmppath}/.hiddenfile" \
			"${tmppath}/.hiddenfile.conf" \
			"${tmppath}/.hiddenfile.list" \
			"${tmppath}/multi..dot" \
			"${tmppath}/multi.dot.conf" \
			"${tmppath}/multi.dot.list" \
			"${tmppath}/disabledfile.disabled" \
			"${tmppath}/disabledfile.conf.disabled" \
			"${tmppath}/disabledfile.list.disabled" \
			"${tmppath}/invälid.conf" \
			"${tmppath}/invalíd" \
			"${tmppath}/01invalíd"
		mkdir "${tmppath}/invaliddir" \
			"${tmppath}/directory.conf" \
			"${tmppath}/directory.list" \
			"${tmppath}/directory.wron" \
			"${tmppath}/directory.list.disabled"
		ln -s "${tmppath}/anormalfile" "${tmppath}/linkedfile.list"
		ln -s "${tmppath}/non-existing-file" "${tmppath}/brokenlink.list"
	elif [ $name = "getLanguages${EXT}" ]; then
		tmppath=$(mktemp -d)
		touch "${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-tr" \
			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-pt" \
			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-se~" \
			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-st.bak" \
			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-ast_DE" \
			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-tlh%5fDE"
	elif [ $name = "HashSums${EXT}" ]; then
		TMP="$(readlink -f "./${0}")"
		tmppath="$TMP"
		tmppath="${tmppath} $(md5sum $TMP | cut -d' ' -f 1)"
		tmppath="${tmppath} $(sha1sum $TMP | cut -d' ' -f 1)"
		tmppath="${tmppath} $(sha256sum $TMP | cut -d' ' -f 1)"
		tmppath="${tmppath} $(sha512sum $TMP | cut -d' ' -f 1)"
	elif [ $name = "CompareVersion${EXT}" ]; then
		tmppath="${DIR}/versions.lst"
	elif [ $name = "CdromFindPackages${EXT}" ]; then
		tmppath=$(mktemp -d)
		mkdir -p "${tmppath}/.disk" "${tmppath}/pool" \
			"${tmppath}/dists/stable/main/binary-i386" \
			"${tmppath}/dists/stable/main/source" \
			"${tmppath}/dists/stable/contrib/binary-amd64" \
			"${tmppath}/dists/stable/contrib/binary-all" \
			"${tmppath}/dists/unstable/main/binary-i386" \
			"${tmppath}/dists/unstable/main/i18n" \
			"${tmppath}/dists/unstable/main/source" \
			"${tmppath}/dists/broken/non-free/source"
		touch "${tmppath}/dists/broken/.aptignr" \
			"${tmppath}/dists/stable/main/binary-i386/Packages" \
			"${tmppath}/dists/stable/main/binary-i386/Packages.bz2" \
			"${tmppath}/dists/stable/main/source/Sources.xz" \
			"${tmppath}/dists/stable/contrib/binary-amd64/Packages" \
			"${tmppath}/dists/stable/contrib/binary-amd64/Packages.gz" \
			"${tmppath}/dists/stable/contrib/binary-all/Packages" \
			"${tmppath}/dists/unstable/main/binary-i386/Packages.xz" \
			"${tmppath}/dists/unstable/main/binary-i386/Packages.lzma" \
			"${tmppath}/dists/unstable/main/i18n/Translation-en" \
			"${tmppath}/dists/unstable/main/i18n/Translation-de.bz2" \
			"${tmppath}/dists/unstable/main/source/Sources.xz" \
			"${tmppath}/dists/broken/non-free/source/Sources.gz" \
			"${tmppath}/dists/stable/Release.gpg" \
			"${tmppath}/dists/stable/Release" \
			"${tmppath}/dists/unstable/InRelease" \
			"${tmppath}/dists/broken/Release.gpg"
		ln -s "${tmppath}/dists/unstable" "${tmppath}/dists/sid"
	elif [ $name = "CdromFindMountPointForDevice${EXT}" ]; then
		tmppath=$(mktemp)
		echo 'rootfs / rootfs rw 0 0
sysfs /sys sysfs rw,nosuid,nodev,noexec,relatime 0 0
sysfs0 /sys0 sysfs rw,nosuid,nodev,noexec,relatime 0 0
/dev/disk/by-uuid/fadcbc52-6284-4874-aaaa-dcee1f05fe21 / ext4 rw,relatime,errors=remount-ro,data=ordered 0 0
/dev/sda1 /boot/efi vfat rw,nosuid,nodev,noexec,relatime,fmask=0000,dmask=0000,allow_utime=0022,codepage=437,iocharset=utf8,shortname=lower,quiet,utf8,errors=remount-ro,rw,nosuid,nodev,noexec,relatime,fmask=0000,dmask=0000,allow_utime=0022,codepage=437,iocharset=utf8,shortname=lower,quiet,utf8,errors=remount-ro,rw,nosuid,nodev,noexec,relatime,fmask=0000,dmask=0000,allow_utime=0022,codepage=437,iocharset=utf8,shortname=lower,quiet,utf8,errors=remount-ro,rw,nosuid,nodev,noexec,relatime,fmask=0000,dmask=0000,allow_utime=0022,codepage=437,iocharset=utf8,shortname=lower,quiet,utf8,errors=remount-ro 0 0
tmpfs /tmp tmpfs rw,nosuid,nodev,relatime 0 0' > $tmppath
	fi

	echo -n "Testing with ${NAME} "
	if MALLOC_PERTURB_=21 MALLOC_CHECK_=2 LD_LIBRARY_PATH=${LDPATH} ${testapp} ${tmppath} ; then
		echo "$TESTOKAY"
	else
		echo "$TESTFAIL"
		EXIT_CODE=1
	fi

	if [ -n "$tmppath" -a -d "$tmppath" ]; then
		rm -rf "$tmppath"
	fi
done
exit $EXIT_CODE
